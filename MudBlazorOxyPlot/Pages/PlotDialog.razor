@using OxyPlot
@using OxyPlot.Axes
@using OxyPlot.Series
@using OxyPlot.Blazor
@implements IDisposable
<MudDialog>
    <DialogContent>
        <BlazorPlotView Width="80vw" Height="60vh" Model="_model" ReverseMouseWheel="true" />
    </DialogContent>
</MudDialog>
@code {
    readonly List<BarItem> _bars = new List<BarItem>();
    Timer? _timer;
    PlotModel? _model;
    void IDisposable.Dispose() => _timer?.Dispose();

    protected override void OnInitialized()
    {
        _timer = new Timer(Timeout, null, 500, 500);
        _model = new PlotModel
            {
                Title = "Cake Type Popularity",
            };
        //generate a random percentage distribution between the 5
        //cake-types (see axis below)
        var rand = new Random();
        double[] cakePopularity = new double[5];
        for (int i = 0; i < 5; ++i)
        {
            cakePopularity[i] = rand.NextDouble();
        }
        var sum = cakePopularity.Sum();
        for (int i = 0; i < 5; ++i)
        {
            _bars.Add(new BarItem { Value = (cakePopularity[i] / sum * 100) });
        }
        var barSeries = new BarSeries
            {
                XAxisKey = "Value",
                YAxisKey = "CakeAxis",
                ItemsSource = _bars,
                LabelPlacement = LabelPlacement.Inside,
                LabelFormatString = "{0:.00}%",
                TrackerFormatString = "Hello\n0={0}\r{1}\r\n{2}",
                //TrackerKey = "x",
            };
        _model.Series.Add(barSeries);
        _model.Axes.Add(new LinearAxis
            {
                Key = "Value",
                Position = AxisPosition.Left,
                MajorGridlineStyle = LineStyle.Automatic,
                Minimum = 0,
                Maximum = 100,
            });
        _model.Axes.Add(new CategoryAxis
            {
                Position = AxisPosition.Bottom,
                Key = "CakeAxis",
                ItemsSource = new[] {
                    "Apple cake",
                    "Baumkuchen",
                    "Bundt Cake",
                    "Chocolate cake",
                    "Carrot cake"
                    }
            });
    }

    void Timeout(object? _) => InvokeAsync(Update);

    void Update()
    {
        var rand = new Random();
        double[] cakePopularity = new double[5];
        for (int i = 0; i < _bars.Count; ++i)
        {
            cakePopularity[i] = rand.NextDouble();
        }
        var sum = cakePopularity.Sum();
        for (int i = 0; i < _bars.Count; ++i)
        {
            _bars[i].Value = (cakePopularity[i] / sum * 100);
        }
        _model?.InvalidatePlot(true);
    }
}
