@page "/fetchdata"
@using OxyPlot
@using OxyPlot.Axes
@using OxyPlot.Series
@using OxyPlot.Legends

<PageTitle>Weather forecast</PageTitle>

@using OxyPlot.Blazor.Server.Demo.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<BlazorPlotView Model=@_foreCastPlot Height="50vh" Width="100vw" />

@code {
    private WeatherForecast[]? forecasts;
    private PlotModel? _foreCastPlot;

    static OxyColor FromSummary(string? summary) => summary switch
    {
        "Hot" => OxyColors.Red,
        "Warm" => OxyColors.Yellow,
        "Cool" => OxyColors.AliceBlue,
        "Freezing" => OxyColors.Violet,
        _ => OxyColors.Undefined,
    };

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        var model = new PlotModel
            {
                Title = "Weather Forecast",
            };
        model.Legends.Add(new Legend
        {

        });
        model.Axes.Add(new CategoryAxis
            {
                Key = "ForecastLocation",
                Position = AxisPosition.Left,
                MajorGridlineStyle = LineStyle.Automatic,
            });
        model.Axes.Add(new LinearAxis
            {
                Key = "Temperature",
                Position = AxisPosition.Bottom,
                Title ="T [°C]",
                MajorGridlineStyle = LineStyle.Automatic,
            });
        model.Series.Add(new BarSeries
            {
                Title = "The temperatures",
                YAxisKey = "ForecastLocation",
                XAxisKey = "Temperature",
                ItemsSource = forecasts.Select((f, i) => new BarItem { Value = f.TemperatureC, CategoryIndex = i, Color = FromSummary(f.Summary), }).ToList(),
            });

        _foreCastPlot = model;
        StateHasChanged();
    }
}
